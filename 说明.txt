

第一、memcached的demo实现  代码为m1下面的内容
 参考：
http://uule.iteye.com/blog/2142890
http://www.tashan10.com/memcachedda-jian-huan-cun-xi-tong/
使用windows版本
客户端有两种方式：
1.基于java_memcached-release_2.6.3
给的材料是 2.6.3，案例中的
client.setCompressEnable(true);  
client.setCompressThreshold(1000*1024);  
这两行执行不了
使用其他案例中的 2.5.3就可以了，

2.基于alisoft-xplatform-asf-cache-2.5.1
log4j.xml 是这里用的，是把所有的信息打印到控制台中

第二、相关的策略
参考：
http://hzp.iteye.com/blog/1872664

Memcached服务器(ms)
内存分配
默认情况下，ms是用一个内置的叫“块分配器”的组件来分配内存的。舍弃c++标准的malloc/free的内存分配，而采用块分配器的主要目的 是为了避免内存碎片，否则操作系统要花费更多时间来查找这些逻辑上连续的内存块（实际上是断开的）。用了块分配器，ms会轮流的对内存进行大块的分配，并 不断重用。当然由于块的大小各不相同，当数据大小和块大小不太相符的情况下，还是有可能导致内存的浪费。
同时，ms对key和data都有相应的限制，key的长度不能超过250字节，data也不能超过块大小的限制 --- 1MB。
因为 mc所使用的hash算法，并不会考虑到每个ms的内存大小。
缓存策略
当ms的hash表满了之后，新的插入数据会替代老的数据，更新的策略是LRU（最近最少使用），以及每个kv对的有效时限。Kv对存储有效时限是在mc端由app设置并作为参数传给ms的。
同时ms采用是偷懒替代法，ms不会开额外的进程来实时监测过时的kv对并删除，而是当且仅当，新来一个插入的数据，而此时又没有多余的空间放了，才会进行清除动作。
缓存式的Web应用程序架构
有了缓存的支持，我们可以在传统的app层和db层之间加入cache层， 每个app服务器都可以绑定一个mc，每次数据的读取都可以从ms中取得，如果没有，再从db层读取。而当数据要进行更新时，除了要发送update的 sql给db层，同时也要将更新的数据发给mc，让mc去更新ms中的数据。
假设今后我们的数据库可以和ms进行通讯了，那可以将更新的任务统一交给db层，每次数据库更新数据的同时会自动去更新ms中的数据，这样就可以进一步减少app层的逻辑复杂度。如下图：
不过每次我们如果没有从cache读到数据，都不得不麻烦数据库。为了最小化数据库的负载压力，我们可以部署数据库复写，用slave数据库来完成读取操作，而master数据库永远只负责三件事：1.更新数据；2.同步slave数据库；3.更新cache。如下图：

第三、memcached 的应用的详细解析、spring的改写、实际mvc模型中的用法 代码在m2下
详解：
http://blog.csdn.net/sup_heaven/article/details/32337711
实际应用
http://blog.csdn.net/sup_heaven/article/details/32728477
这一篇将以介绍一个memcached在项目中的应用。假设我们有一个web应用，里面有商品信息，文章信息，评论信息，其他信息，我们希望对其做缓存，那么我们在ServiceImpl层就不在调用DAOmpl层，而是调用CacheImpl层，在CacheImpl层中判断要取出的商品信息是否已经在缓存中，如果在了，那么直接从缓存中去，如果没有这个时候还是从数据库中取，同时将它放到缓存中，以便下次使用。
MemcachedConstant第一步、新建一个常量类，用于上面的四种信息的在数组中的索引。
MemcachedKeyUtil 第二步、由于有大量的商品信息，我们在放入缓存时必须给定一个key，那么我们最好规范的命名不同类别的key，如商品的key就是商品的前缀加上商品的编号。 
MemcachedUtil    第三步、我们建一个和上一篇文章中一样的工具类，用于新建pool、client，操作缓存等。这里再强调一下，一个pool关联多个server（就是会根据权重将缓存放在这些servers上），一个client会通过poolName关联具体的pool。 
MemcachedSupport 第四步、新建一个基类以供所用继承它的CacheImpl直接调用MemcachedUtil里的方法，如果不写该类那么在CacheImpl中会有很多重复的操作MemcachedUtil的代码。 
GoodsCacheImpl   第五步、新建一个GoodsCacheImpl，该类的作用就是一开始所说的，娶不到缓存，就调用DAO查询并放入缓存，如果缓存中有就直接从缓存中拿。 
这样就在你的应用中使用了memcached，不过上面的只是部分代码，跑不起来的哦。 

